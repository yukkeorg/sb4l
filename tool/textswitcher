#!/usr/bin/python
# coding: utf-8

import sys, os
try:
    import ujson as json
except ImportError:
    try:
        import simplejson as json
    except ImportError:
        import json
from gi.repository import GLib, Gio


def RGB(r, g, b):
    return (r << 16) + (g << 8) + b


class TextBuffer(object):
    def __init__(self, eol='\n', encoding=None):
        self.encoding = encoding or 'utf-8'
        self.eol = eol
        self.buffer = []
        self.maxindex = 0
        self.index = 0

    def clear(self):
        self.buffer[:] = []
        self.maxindex = 0
        self.index = 0

    def read(self, filename):
        self.clear()
        with open(filename, "r") as f:
            for line in f:
                line = line.decode(self.encoding).rstrip()
                self.buffer.append(line)
                self.maxindex += 1
            f.close()

    def pull(self):
        text = ""
        if self.buffer:
            text = self.buffer[self.index] + self.eol
            self.index += 1
            self.index = self.index % self.maxindex
        return text


class TextSwitcher(object):
    def __init__(self, filename, color=None, fps=30, interval=3000, fadetime=180.0):
        self.read_filename = filename
        self.default_interval = interval
        self.text_buffer = TextBuffer(eol='')
        # fade_params 
        self.ticks = 0
        self.alpha = 0
        self.outinterval = (1000.0 / fps)  # ms/frame
        self.fadetime = fadetime # ms
        self.alpha_delta = 256.0 / (self.fadetime / self.outinterval)
        self.textcolor = RGB(255, 255, 255) if color is None else color
        self.nowtext = ""
        self.nowinterval = 0
        self.check = False

    def run(self):
        self.text_buffer.read(self.read_filename)
        f = Gio.File.new_for_path(self.read_filename)
        self.filemonitor = f.monitor_file(Gio.FileMonitorFlags.NONE, None)
        self.filemonitor.connect('changed', self.on_file_changed)
        GLib.timeout_add(self.outinterval, self.output_text)
        try:
            GLib.MainLoop().run()
        except KeyboardInterrupt:
            pass

    def output_text(self):
        isoutput = True
        if self.ticks == 0:
            while True:
                text = self.text_buffer.pull()
                items = text.split(u'|')
                if len(items) == 1:
                    self.nowtext = items[0]
                    self.nowinterval = self.default_interval
                    break
                elif len(items) == 2:
                    try:
                        self.nowinterval = int(items[0])
                    except ValueError:
                        self.nowinterval = self.default_interval
                    self.nowtext = items[1]
                    break
        elif self.ticks <= self.fadetime:
            self.alpha += self.alpha_delta
            self.alpha = min(self.alpha, 255)
        elif self.ticks >= self.nowinterval - self.fadetime:
            self.alpha -= self.alpha_delta
            self.alpha = max(self.alpha, 0)
        else:
            if self.check:
                isoutput = False
            else:
                self.alpha = 255
                self.check = True
        if isoutput:
            color = (int(self.alpha) << 24) + self.textcolor
            d = {"1": { "color": color, "text": self.nowtext } }
            sys.stdout.write(json.dumps(d))
            sys.stdout.write("\0")
            sys.stdout.flush()
        self.ticks += self.outinterval
        if self.ticks > self.nowinterval:
            self.ticks = 0
            self.alpha = 0
            self.check = False
        return True

    def on_file_changed(self, monitor, f, otherfile, event):
        if event in (Gio.FileMonitorEvent.CHANGED,
                     Gio.FileMonitorEvent.CREATED):
            self.text_buffer.read(self.read_filename)


if __name__ == '__main__':
    app = TextSwitcher(sys.argv[1])
    app.run()

